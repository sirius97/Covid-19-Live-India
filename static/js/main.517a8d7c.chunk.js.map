{"version":3,"sources":["Components/StatePage/StatePage.module.css","Components/HomePage/HomePage.module.css","Components/HomePage/HomePage.js","Components/Map/Map.js","Components/StatePage/StatePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","summary","axios","get","then","response","setState","data","console","log","catch","er","message","className","classes","this","total","confirmedCasesIndian","confirmedCasesForeign","discharged","deaths","to","style","color","marginLeft","Component","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","geographyStyle","default","outline","hover","fill","transition","pressed","places","getHeatMapData","id","value","map","el","index","loc","totalConfirmed","Map","props","useState","tooltipContent","setTooltipContent","setStateData","setData","useEffect","regional","key","push","onMouseEnter","geo","current","properties","name","onMouseLeave","mapPic","loader","data-tip","projectionConfig","projection","width","height","geography","geographies","find","s","rsmKey","overflow","backgroundColor","padding","onClick","States","regions","stateData","i","StatePage","App","path","exact","component","State","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.517a8d7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatePage\":\"StatePage_StatePage__Kd0Iz\",\"loader\":\"StatePage_loader__27LsJ\",\"load4\":\"StatePage_load4__1RIz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"HomePage_Home__2sDEG\",\"navlink\":\"HomePage_navlink__3_YmW\"};","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport classes from './HomePage.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Home extends Component{\r\n\r\n    state = {\r\n        summary : []\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://api.rootnet.in/covid19-in/stats/latest')\r\n                .then(response => {\r\n                    this.setState({\r\n                        summary : {...response.data.data.summary}\r\n                    })\r\n                    console.log(this.state.summary)\r\n                }).catch(er => {\r\n                    console.log(er.message)\r\n                })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = {classes.Home}>\r\n                <h2>Total Casses</h2>\r\n                <h4>{this.state.summary.total}</h4>\r\n                <h2>Total Confirmed Casses</h2>\r\n                <h4>{this.state.summary.confirmedCasesIndian}</h4>\r\n                <h2>Total Confirmed Foreign Casses</h2>\r\n                <h4>{this.state.summary.confirmedCasesForeign}</h4>\r\n                <h2>Total Recovered</h2>\r\n                <h4>{this.state.summary.discharged}</h4>\r\n                <h2>Total Deaths</h2>\r\n                <h4>{this.state.summary.deaths}</h4>\r\n                <NavLink to ='/state'\r\n                style ={{color:'yellow'}}>See For All States</NavLink>\r\n                <NavLink to ='/map'\r\n                style = {{marginLeft: '10px',color: 'yellow'}}\r\n                >See Map</NavLink>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from 'react';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport axios from 'axios';\r\nimport classes from '../StatePage/StatePage.module.css';\r\n\r\n\r\nconst INDIA_TOPO_JSON = require('./india.topo.json');\r\n\r\nconst PROJECTION_CONFIG = {\r\n  scale: 500,\r\n  center: [78.9629, 22.5937]\r\n};\r\n\r\nconst COLOR_RANGE = [\r\n    '#ffedea',\r\n    '#ffcec5',\r\n    '#ffad9f',\r\n    '#ff8a75',\r\n    '#ff5533',\r\n    '#e2492d',\r\n    '#be3d26',\r\n    '#9a311f',\r\n    '#782618'\r\n  ];\r\n  \r\n  const DEFAULT_COLOR = '#EEE';\r\n\r\n  const geographyStyle = {\r\n    default: {\r\n      outline: 'none'\r\n    },\r\n    hover: {\r\n      fill: '#ccc',\r\n      transition: 'all 250ms',\r\n      outline: 'none'\r\n    },\r\n    pressed: {\r\n      outline: 'none'\r\n    }\r\n  };\r\n\r\n  let places = []\r\n\r\n \r\n\r\n\r\nfunction Map(props) {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [StateData, setStateData] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    console.log('main',data)\r\n    \r\n\r\n    useEffect(() => {\r\n        axios.get('https://api.rootnet.in/covid19-in/stats/latest')\r\n        .then(response => {\r\n\r\n            const data = [...response.data.data.regional]\r\n            for(let key in data){\r\n                places.push({...data[key]})\r\n            }              \r\n            setStateData(places)\r\n        })\r\n    }, []);\r\n\r\n  \r\n     \r\n  \r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n      return () => {\r\n        setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n      };\r\n    };\r\n  \r\n    const onMouseLeave = () => {\r\n      setTooltipContent('');\r\n    };\r\n\r\n    const onChangeButtonClick = () => {\r\n        setData(getHeatMapData());\r\n      };\r\n\r\n\r\n      let mapPic = <div className = {classes.loader}></div>\r\n      if(places[0]){\r\n          mapPic = (    \r\n            <div>\r\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n                    <ComposableMap \r\n                        data-tip=\"\"\r\n                        projectionConfig={PROJECTION_CONFIG}\r\n                    projection=\"geoMercator\"\r\n                    width={600}\r\n                    height={300}>\r\n                            <Geographies geography={INDIA_TOPO_JSON}>\r\n                        {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                            <Geography\r\n                                key={geo.rsmKey}\r\n                                geography={geo}\r\n                                style={geographyStyle}\r\n                                onMouseEnter={onMouseEnter(geo, current)}\r\n                                onMouseLeave={onMouseLeave}\r\n                            />\r\n                            );\r\n                        })\r\n                        }\r\n                            </Geographies>\r\n                    </ComposableMap>\r\n            </div>)\r\n      }\r\n    return (\r\n        <div style = {{overflow: 'hidden',height : '100%',backgroundColor: 'white'}}>\r\n            <div >\r\n                    <button style = {{backgroundColor: 'green', padding: '10px', marginLeft: '-100px'}} onClick={onChangeButtonClick}>Click to activate map</button>\r\n            </div>\r\n            {mapPic}\r\n        </div>\r\n    )   \r\n\r\n    }\r\n\r\n    const getHeatMapData = () => {\r\n  \r\n      let data = [\r\n        { id: 'AN', state: 'Andaman and Nicobar Islands', value: 0 },\r\n        { id: 'AP', state: 'Andhra Pradesh', value: 0  },\r\n        { id: 'AR', state: 'Arunachal Pradesh', value: 0  },\r\n        { id: 'AS', state: 'Assam', value: 0  },\r\n        { id: 'BR', state: 'Bihar', value: 0  },\r\n        { id: 'CH', state: 'Chandigarh', value: 0  },\r\n        { id: 'CT', state: 'Chhattisgarh', value: 0  },\r\n        { id: 'DN', state: 'Dadra and Nagar Haveli', value: 0  },\r\n        { id: 'DL', state: 'Delhi', value: 0  },\r\n        { id: 'GA', state: 'Goa', value: 0  },\r\n        { id: 'GJ', state: 'Gujarat', value: 0  },\r\n        { id: 'HR', state: 'Haryana', value: 0  },\r\n        { id: 'HP', state: 'Himachal Pradesh', value: 0  },\r\n        { id: 'JK', state: 'Jammu and Kashmir', value: 0  },\r\n        { id: 'JH', state: 'Jharkhand', value: 0  },\r\n        { id: 'KA', state: 'Karnataka', value: 0  },\r\n        { id: 'KL', state: 'Kerala', value: 0  },\r\n        { id: 'LA', state: 'Ladakh', value: 0  },\r\n        { id: 'MP', state: 'Madhya Pradesh', value: 0  },\r\n        { id: 'MH', state: 'Maharashtra', value: 0  },\r\n        { id: 'MN', state: 'Manipur', value: 0  },\r\n        { id: 'ML', state: 'Meghalaya', value: 0  },\r\n        { id: 'MZ', state: 'Mizoram', value: 0  },\r\n        { id: 'OR', state: 'Odisha', value: 0  },\r\n        { id: 'PY', state: 'Puducherry', value: 0  },\r\n        { id: 'PB', state: 'Punjab', value: 0  },\r\n        { id: 'RJ', state: 'Rajasthan', value: 0  },\r\n        { id: 'TN', state: 'Tamil Nadu',value: 0  },\r\n        { id: 'TG', state: 'Telangana', value: 0  },\r\n        { id: 'TR', state: 'Tripura', value: 0  },\r\n        { id: 'UT', state: 'Uttarakhand', value: 0  },\r\n        { id: 'UP', state: 'Uttar Pradesh', value: 0  },\r\n        { id: 'WB', state: 'West Bengal', value: 0  },\r\n      ];\r\n  \r\n let newData = places.map((el,index) => {\r\n   \r\n       if(el.loc == data[index].state){\r\n           data[index].value = el.totalConfirmed\r\n       }else{\r\n           data[index].value = 0\r\n       }\r\n   })\r\n  console.log('heatMap',data)\r\n      return data;\r\n};\r\n    \r\n\r\n\r\nexport default Map;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './StatePage.module.css';\r\nimport Map from '../Map/Map';\r\n\r\nclass States extends Component {\r\n\r\n    state = {\r\n        regions: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://api.rootnet.in/covid19-in/stats/latest')\r\n                .then(response => {\r\n                    const data = [...response.data.data.regional]\r\n                    const places = []\r\n                    for(let key in data){\r\n                        places.push({...data[key]})\r\n                    }\r\n                    this.setState({\r\n                        regions: places\r\n                    })\r\n\r\n    })\r\n}\r\n    render(){\r\n        \r\n        let stateData = <div className={classes.loader}></div>\r\n        if(this.state.regions[0]){\r\n            stateData = (this.state.regions.map((el,i) => {\r\n            return <ul key = {i}>\r\n                        <li>{this.state.regions[i].loc} : {this.state.regions[i].confirmedCasesIndian}</li>\r\n                        <li>Discharged : {this.state.regions[i].discharged}</li>\r\n                        <li>Deaths : {this.state.regions[i].deaths}</li>\r\n                    </ul>\r\n            })) \r\n        }\r\n        \r\n        return(\r\n            <div className = {classes.StatePage}>\r\n                <h3>Deatils on each state</h3>\r\n                {stateData}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default States","import React, {Component} from 'react';\nimport './App.css';\nimport {Route, NavLink} from 'react-router-dom';\nimport Home from './Components/HomePage/HomePage';\nimport State from './Components/StatePage/StatePage';\nimport Map from './Components/Map/Map';\n\nclass App extends Component {\n\n  \n\n  render(){\n    return (\n      <div className={\"App\"}>\n        <div className={\"Part\"}>\n        <h1>COVID-19 Live update India!</h1>\n        <NavLink to ='/state'\n                style ={{color:'yellow'}}>States</NavLink>\n        <NavLink to ='/map'\n                style = {{marginLeft: '10px',color: 'yellow'}}\n                >Map</NavLink>\n      </div>\n        <Route path = '/Covid-19-Live-India/' exact component ={Home} />\n        <Route path = '/state' component = {State} />\n        <Route path = '/map' component = {Map} />\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}